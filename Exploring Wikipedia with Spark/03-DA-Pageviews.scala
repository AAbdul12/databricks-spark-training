{"version":"NotebookV1","origId":503877321546468,"name":"03-DA-Pageviews","language":"scala","commands":[{"version":"CommandV1","origId":503877321546470,"guid":"961656e7-3d69-4890-b3da-58e9026cc398","subtype":"command","commandType":"auto","position":1.0,"command":"%md #![Spark Logo](http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/general/logo_spark.png)\n\n**Objective:**\nAnalyze Desktop vs Mobile traffic to English Wikipedia (continued)\n\n**Time to Complete:**\n20 mins\n\n**Data Source:**\npageviews_by_second (<a href=\"http://datahub.io/en/dataset/english-wikipedia-pageviews-by-second\" target=\"_blank\">255 MB</a>)\n\n**Business Questions:**\n\n* Question # 1) How many total incoming requests were to the mobile site vs the desktop site?\n* Question # 2) What is the start and end range of time for the pageviews data? How many days of data is in the DataFrame?\n* Question # 3) What is the avg/min/max for the number of requests received for Mobile and Desktop views?\n* Question # 4) Which day of the week does Wikipedia get the most traffic?\n* Question # 5) Can you visualize both the mobile and desktop site requests in a line chart to compare traffic between both sites by day of the week?\n* Question # 6) Why is there so much more traffic on Monday vs. other days of the week?\n\n**Technical Accomplishments:**\n- Give a DataFrame a human-readable name when caching\n- Cast a String col type into a Timestamp col type\n- Browse the Spark SQL API docs\n- Learn how to use \"Date time functions\"\n- Create and use a User Defined Function (UDF)\n- Make a Databricks bar chart visualization\n- Join 2 DataFrames\n- Make a Matplotlib visualization","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c975ab34-21af-432e-9b5f-71adefa6f244"},{"version":"CommandV1","origId":503877321546471,"guid":"6a9498c0-020b-4c53-ad59-aa7faf8ef88a","subtype":"command","commandType":"auto","position":2.0,"command":"%md Attach to, and then restart your cluster first to clear out old memory caches and get to a default, standard environment. The restart should take 1 - 2 minutes.\n\n![Restart Cluster](http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/general/restart_cluster.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f8ee2cb4-cf26-40f9-ae8b-e159fe6c3eb9"},{"version":"CommandV1","origId":503877321546472,"guid":"f507199e-7f43-40f0-bb7d-36abb455e5c4","subtype":"command","commandType":"auto","position":3.0,"command":"%md ####![Wikipedia Logo Tiny](http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/general/logo_wikipedia_tiny.png) ![Spark Logo Tiny](http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/general/logo_spark_tiny.png) **Continue Exploring Pageviews By Second**","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e2f0fadb-4777-4a14-b09f-4809d4961837"},{"version":"CommandV1","origId":503877321546473,"guid":"af1315b6-1b70-446c-8d09-f7811637418e","subtype":"command","commandType":"auto","position":4.0,"command":"%md In this notebook, we will continue exploring the Wikipedia pageviews by second data.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"176f8303-fd5a-4a39-acff-aeba8f09194d"},{"version":"CommandV1","origId":503877321546474,"guid":"e659c3f2-65ee-4a56-be33-67539bc34dd9","subtype":"command","commandType":"auto","position":5.0,"command":"%md First, change the shuffle.partitions option to 3:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"07a8571a-2f8d-45e4-bace-01d2d1f2a503"},{"version":"CommandV1","origId":503877321546475,"guid":"5e703d74-21ee-4226-a9fd-d78831b15b5c","subtype":"command","commandType":"auto","position":6.0,"command":"sqlContext.setConf(\"spark.sql.shuffle.partitions\", \"3\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ec0eb644-80ce-4abd-b4a9-293c28a642c3"},{"version":"CommandV1","origId":503877321546476,"guid":"5648d207-b11c-4485-8fe8-b570d6a719fb","subtype":"command","commandType":"auto","position":7.0,"command":"%md We're going to read the raw pageviews-by-second data. This data is stored in a TSV (tab-separated value), so we can read it using \nthe add-on [Spark CSV](https://spark-packages.org/package/databricks/spark-csv) package. (Note: In Spark 2.0, this package is no longer an add-on; it's built-in.)\n","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"307491da-339c-4562-9703-139707d974e9"},{"version":"CommandV1","origId":503877321546477,"guid":"4883b886-9038-47d1-892f-461e0f489929","subtype":"command","commandType":"auto","position":7.5,"command":"%fs ls /databricks-datasets/wikipedia-datasets/data-001/pageviews/raw","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477317615562E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d5383c15-633e-433c-9604-0cd18ec237e5"},{"version":"CommandV1","origId":503877321546478,"guid":"105d106e-bbb9-455b-8d31-7ed4868b0587","subtype":"command","commandType":"auto","position":7.5625,"command":"%md \nHowever, we don't want to let Spark CSV infer the schema, because that requires two passes over the data file. The file isn't huge, but it's more than 200 MB, so two passes is a little slow, especially for a class. So, we're going to specify the schema ourselves. Let's take a quick look at the first couple lines of the file:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"502bf761-ca1c-4ae3-93f4-70209079d631"},{"version":"CommandV1","origId":503877321546479,"guid":"2ffe9a76-a1bf-4977-b15d-56a108057366","subtype":"command","commandType":"auto","position":7.59375,"command":"display(\n  sqlContext.read.text(\"dbfs:/databricks-datasets/wikipedia-datasets/data-001/pageviews/raw/pageviews_by_second.tsv\")\n)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477319522315E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4595fcad-eb1f-45c0-9206-1cf071b05597"},{"version":"CommandV1","origId":503877321546480,"guid":"e268a3a4-0264-4568-9602-43fea10ff48c","subtype":"command","commandType":"auto","position":7.609375,"command":"%md Okay, so the fields appear to be:\n\n* The timestamp, in ISO 8601 format. Unfortunately, Spark SQL can't parse this automatically, so we'll have to treat it as a string and do something ugly (and tricky) to make it into a timestamp.\n* The site, which is just \"mobile\" or \"desktop\". So that's obviously a string.\n* The request count, which is an integer.\n\nWe can use this information to craft our own schema, as shown below.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f984f33c-8302-468d-b22f-b90ebc69dbbd"},{"version":"CommandV1","origId":503877321546481,"guid":"7ebe7141-2bdd-4f0e-9674-1b2cd17b6626","subtype":"command","commandType":"auto","position":7.625,"command":"import org.apache.spark.sql.types._\nval schema = StructType(\n  List(\n    StructField(\"timestamp\", StringType, true),\n    StructField(\"site\", StringType, true),\n    StructField(\"requests\", IntegerType, true)\n  )\n)\n","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477326107829E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6ba0f4ad-080d-4f23-acb1-83d033e431d4"},{"version":"CommandV1","origId":503877321546482,"guid":"3277cf60-5716-4f33-a744-1007896f54f6","subtype":"command","commandType":"auto","position":7.6875,"command":"%md As noted above, Spark SQL cannot parse ISO 8601 timestamps. _We_ can, using a `java.text.SimpleDateFormat` format string, but there's no `date_parse` SQL function in the Spark SQL API.\nHowever, there _is_ a way we can parse it in this case:\n\n1. First, we can use the Spark SQL `unix_timestamp` function, along with\na [SimpleDateFormat](https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html), to parse the ISO 8601 timestamp\ninto a Unix timestamp (a long integer representing the number of seconds since January 1, 1970).\n\n2. Second, we can cast the Unix timestamp to a timestamp. (This is a conversion that Spark understands.)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d419960b-0ef2-4064-9d8e-3b8d0d60f6bb"},{"version":"CommandV1","origId":503877321546483,"guid":"55962b0c-60df-434c-b58a-bdd720a43eb5","subtype":"command","commandType":"auto","position":7.71875,"command":"import org.apache.spark.sql.functions._\nval df = sqlContext.read\n                   .format(\"com.databricks.spark.csv\")\n                   .option(\"delimiter\", \"\\t\")\n                   .option(\"header\", \"true\")\n                   .schema(schema)\n                   .load(\"dbfs:/databricks-datasets/wikipedia-datasets/data-001/pageviews/raw/pageviews_by_second.tsv\")\n                   .select($\"site\", $\"requests\", \n                             (\n                               unix_timestamp($\"timestamp\", \"yyyy-MM-dd'T'HH:mm:ss\")\n                             ).cast(\"timestamp\").as(\"timestamp\"))\ndf.show()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477326110853E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"32d079af-5b26-4e0c-8ea4-2fd27bb21365"},{"version":"CommandV1","origId":503877321546484,"guid":"f4c5b9f2-b804-4db3-96d6-665fda585037","subtype":"command","commandType":"auto","position":7.875,"command":"df.show(truncate=false)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477320183378E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"30490c64-e400-4e6b-a7d5-8a1994124982"},{"version":"CommandV1","origId":503877321546485,"guid":"d3f40918-3e2b-4c35-878b-af814a08ebeb","subtype":"command","commandType":"auto","position":7.9375,"command":"%md Now, let's put the data in a more useful order.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5abb3b26-309c-46a0-89cb-3c46428e4c8b"},{"version":"CommandV1","origId":503877321546486,"guid":"a4711fae-c577-4d2e-ade5-2e6a09e13199","subtype":"command","commandType":"auto","position":8.0,"command":"val pageviewsDF = df.orderBy($\"timestamp\", $\"site\".desc)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477320212765E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5a3e58ac-db88-4075-9605-8f9f3d9babab"},{"version":"CommandV1","origId":503877321546487,"guid":"5e5d19e3-e04f-4a06-a4c1-1b8ea571e38e","subtype":"command","commandType":"auto","position":9.0,"command":"%md Register the Temporary Table and use sqlContext's `cacheTable()` method to give the DataFrame a human-readable name in the Storage UI:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d23011a0-9560-4397-8c4b-9ee0e9ab2f1d"},{"version":"CommandV1","origId":503877321546488,"guid":"b8d77e18-b2c5-455a-a8a8-2af38dac7e94","subtype":"command","commandType":"auto","position":10.0,"command":"pageviewsDF.registerTempTable(\"pageviews_by_second_ordered\")\nsqlContext.cacheTable(\"pageviews_by_second_ordered\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477320218996E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c2f12e45-5e0b-4e29-bbf2-03fad8a1a4ff"},{"version":"CommandV1","origId":503877321546489,"guid":"2a1e428a-76d7-4966-a03b-c16a70507d84","subtype":"command","commandType":"auto","position":11.0,"command":"%md Materialize the cache with a `count()` action:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"223df9b7-084c-48a8-a270-a7b7d0dfb838"},{"version":"CommandV1","origId":503877321546490,"guid":"9a3bade5-5772-42de-99e3-f6b94aa01293","subtype":"command","commandType":"auto","position":12.0,"command":"pageviewsDF.count // materialize the cache","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321021882E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4f2c56ec-de9a-4a31-83e0-ba8c50f15ffe"},{"version":"CommandV1","origId":503877321546491,"guid":"58cc3015-805b-4e58-af21-d7a77d2b3ab9","subtype":"command","commandType":"auto","position":13.0,"command":"%md You should now see the DataFrame in the Storage UI:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"93d9d230-5f36-4c30-8504-6ae4234ae96b"},{"version":"CommandV1","origId":503877321546492,"guid":"07eaf569-c4f2-4c98-8cef-d4724c8998cc","subtype":"command","commandType":"auto","position":14.0,"command":"%md ![Clean Name and 3 partitions](http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/pageviews/pageviews_cleanname_3partitions.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0525d763-5cc3-49e5-90e5-dc9bcccd84c7"},{"version":"CommandV1","origId":503877321546493,"guid":"2304353b-e4f5-4424-b092-9e9b3d1ba6f4","subtype":"command","commandType":"auto","position":15.0,"command":"%md Look at the first 6 rows:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d8fff1f2-9d8d-4d5a-a38b-3a984ef73dbc"},{"version":"CommandV1","origId":503877321546494,"guid":"acb7881f-7a85-4251-9900-4cdf6ecac13e","subtype":"command","commandType":"auto","position":16.0,"command":"pageviewsDF.show(6)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321026673E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a77eb6d0-577e-44f2-837b-941b9c4fd403"},{"version":"CommandV1","origId":503877321546495,"guid":"82680593-6bf9-45d4-b74d-5b9bca5a6fad","subtype":"command","commandType":"auto","position":17.0,"command":"%md Verify that the DataFrame is indeed in memory by running a count again:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"aed977ad-d7bd-4819-b7e5-ff9e857668f2"},{"version":"CommandV1","origId":503877321546496,"guid":"821cd195-f5d2-448f-9893-6de167e474f3","subtype":"command","commandType":"auto","position":18.0,"command":"// This should run in less than a second\npageviewsDF.count","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321094245E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8024cbef-2dae-4753-b337-0be33d651e37"},{"version":"CommandV1","origId":503877321546497,"guid":"d4eddcc9-f7cf-4da7-b574-4eced0a46189","subtype":"command","commandType":"auto","position":19.0,"command":"%md ####![Wikipedia + Spark Logo Tiny](http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/general/wiki_spark_small.png) Q-1) How many total incoming requests were to the mobile site vs the desktop site?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"272324ce-f32b-4d97-a17c-5bcd153a4df7"},{"version":"CommandV1","origId":503877321546498,"guid":"2aaff084-6bd5-4791-af8d-78b340e95d7b","subtype":"command","commandType":"auto","position":20.0,"command":"%md First, let's sum up the `requests` column to see how many total requests are in the dataset. We've already imported the SQL functions package, which includes statistical functions like `sum`, `max`, `min`, `avg`, etc.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"fddc8140-578f-48ac-a8c6-ebd761a1dbb4"},{"version":"CommandV1","origId":503877321546499,"guid":"95911b40-fa9a-433a-b5d6-9c1009c55edc","subtype":"command","commandType":"auto","position":22.0,"command":"pageviewsDF.select(sum($\"requests\")).show()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321637653E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f542cf8f-3511-4765-bb20-93ffd913e392"},{"version":"CommandV1","origId":503877321546500,"guid":"d703b6a4-8516-42d6-b442-3d1e761c1e7f","subtype":"command","commandType":"auto","position":23.0,"command":"%md So, there are about 13.3 billion requests total.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"289bfc0e-4f80-4c62-90de-5b77d37b70b0"},{"version":"CommandV1","origId":503877321546501,"guid":"0a74c953-906b-45d6-8c56-19b71cba56b5","subtype":"command","commandType":"auto","position":24.0,"command":"%md But how many of the requests were for the mobile site?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"badf2df1-cd6b-431d-962f-c9af705f1c2c"},{"version":"CommandV1","origId":503877321546502,"guid":"ffe295a6-2916-4b65-980c-4e58f185eac4","subtype":"command","commandType":"auto","position":25.0,"command":"%md **Challenge 1:** Using just the commands we learned so far, can you figure out how to filter the DataFrame for just **mobile** traffic and then sum the requests column?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"fa1424b2-afc8-4520-8e60-be90320300bd"},{"version":"CommandV1","origId":503877321546503,"guid":"332f5526-0131-43c6-bd34-fc024687810c","subtype":"command","commandType":"auto","position":26.0,"command":"// Type your answer here...","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"45d2fab8-2952-482b-9925-e31931ccdb48"},{"version":"CommandV1","origId":503877321546504,"guid":"679ebdc1-72dc-4740-a8a1-484b2033880d","subtype":"command","commandType":"auto","position":27.0,"command":"%md **Challenge 2:** What about the **desktop** site? How many requests did it get?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b9b7ebe3-1b67-43d6-8ec0-ca4c556d0cf4"},{"version":"CommandV1","origId":503877321546505,"guid":"9641c935-4ec6-4083-ad25-6226a4bf549c","subtype":"command","commandType":"auto","position":28.0,"command":"// Type your answer here...","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"fb9abb7d-a61a-4a25-b1e6-de46d6736283"},{"version":"CommandV1","origId":503877321546506,"guid":"72429df9-206d-4978-bd8e-c6479e556798","subtype":"command","commandType":"auto","position":29.0,"command":"%md So, about twice as many were for the desktop site.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"50b6a2c8-902d-4eda-8c29-65e6b3623734"},{"version":"CommandV1","origId":503877321546507,"guid":"85576371-c309-429b-a91f-6fe0baf27e7b","subtype":"command","commandType":"auto","position":30.0,"command":"%md ####![Wikipedia + Spark Logo Tiny](http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/general/wiki_spark_small.png) Q-2) What is the start and end range of time for the pageviews data? How many days of data is in the DataFrame?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"aa936197-090b-4781-870c-7cf8bd88cc71"},{"version":"CommandV1","origId":503877321546508,"guid":"a99faae2-e169-4a08-9637-4bacc70796a5","subtype":"command","commandType":"auto","position":31.0,"command":"%md To answer this, we should first convert the `timestamp` column from a `String` type to a `Timestamp` type. Currently the first column of `pageviewsDF` is typed as a string:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"06a4e582-2b0c-4322-a704-022383518a22"},{"version":"CommandV1","origId":503877321546509,"guid":"ba85e531-b80a-4d31-ae87-1ae831d78443","subtype":"command","commandType":"auto","position":32.0,"command":"pageviewsDF.printSchema()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1c59b115-0811-475c-b7d1-3ddd800a0717"},{"version":"CommandV1","origId":503877321546510,"guid":"70613fc1-944e-403e-8bf8-7b10234a33c8","subtype":"command","commandType":"auto","position":33.0,"command":"%md Create a new DataFrame, `pageviewsOrderedByTimestampDF`, that changes the timestamp column from a `string` data type to a `timestamp` data type:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1c03a5cd-d7e0-4425-8f34-316830f7a968"},{"version":"CommandV1","origId":503877321546511,"guid":"4c9db47c-4a67-498c-8809-29e04c99a17a","subtype":"command","commandType":"auto","position":34.0,"command":"val pageviewsTimestampDF = pageviewsDF.select($\"timestamp\".cast(\"timestamp\"), $\"site\", $\"requests\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321107348E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"005d7790-bbc6-4a1d-a81b-57a2e334fc56"},{"version":"CommandV1","origId":503877321546512,"guid":"042c7df0-ebd3-45d5-8d56-3d60a4ff140d","subtype":"command","commandType":"auto","position":35.0,"command":"pageviewsTimestampDF.printSchema()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321107916E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"fee08e67-3642-4d0c-a6e7-1507f7ee5bb4"},{"version":"CommandV1","origId":503877321546513,"guid":"9d824974-a0b9-43bd-82c9-053d1c8e687e","subtype":"command","commandType":"auto","position":36.0,"command":"pageviewsTimestampDF.show(10)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321108606E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"314cdcbb-a3de-49f9-8f88-d8df2144fa41"},{"version":"CommandV1","origId":503877321546514,"guid":"e85f1724-9fff-4e29-82cb-ac781732db24","subtype":"command","commandType":"auto","position":37.0,"command":"%md How many different years is the data from?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0bf7f542-a09d-4c6b-b631-32facf7bf22e"},{"version":"CommandV1","origId":503877321546515,"guid":"739e62b7-7789-4847-bd77-6463cb1ec70d","subtype":"command","commandType":"auto","position":38.0,"command":"%md For the next command, we'll use `year()`, one of the date time function available in Spark. You can review which functions are available for DataFrames in the <a href=\"https://spark.apache.org/docs/1.6.2/api/scala/index.html#org.apache.spark.sql.functions$\" target=\"_blank\">Spark API doc's SQL functions</a>, under \"Date time functions\".","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"17104d67-106d-4b14-b378-df65b1267417"},{"version":"CommandV1","origId":503877321546516,"guid":"e08bbd6e-6f49-427c-99df-2d4004fdefba","subtype":"command","commandType":"auto","position":39.0,"command":"pageviewsTimestampDF.select(year($\"timestamp\")).distinct().show()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321113334E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c231f6a4-15f6-4376-ab40-fa2cb19c69a4"},{"version":"CommandV1","origId":503877321546517,"guid":"916993a3-5089-4fd4-b0dc-d353e36aae5d","subtype":"command","commandType":"auto","position":40.0,"command":"%md The data only spans 2015. But which months?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9ab90247-f89e-4866-9008-08b44c40fb94"},{"version":"CommandV1","origId":503877321546518,"guid":"f7aba57c-171e-4ef6-b367-f9aafd354012","subtype":"command","commandType":"auto","position":41.0,"command":"%md **Challenge 3:** Can you figure out how to check which months of 2015 the data covers (using the <a href=\"https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.functions$\" target=\"_blank\">Spark API docs</a>)?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e3a1c616-03cf-462e-aceb-05908aeffb68"},{"version":"CommandV1","origId":503877321546519,"guid":"c7eb4d9c-e720-44a3-8630-df6faea0f8d9","subtype":"command","commandType":"auto","position":42.0,"command":"// Type your answer here...","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f5731933-d6b3-4d38-a48d-9eeeca3acff6"},{"version":"CommandV1","origId":503877321546520,"guid":"e874b228-2fc5-4bc8-99e0-4f92667a255b","subtype":"command","commandType":"auto","position":43.0,"command":"%md The data covers the months you see above.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a4beae4b-d07e-43ce-8a29-bb3158472ebe"},{"version":"CommandV1","origId":503877321546521,"guid":"42a9d6cf-7c78-4883-8abc-0fdca7bd9eec","subtype":"command","commandType":"auto","position":44.0,"command":"%md Similarly, you can discover how many weeks of timestamps are in the data and how many days of data there is:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3bc49005-de24-4a5a-bc65-9fefe9d2cebc"},{"version":"CommandV1","origId":503877321546522,"guid":"f0e44c90-b9ec-445c-a5c7-6baefb67e6b8","subtype":"command","commandType":"auto","position":45.0,"command":"// How many weeks of data is there?\npageviewsTimestampDF.select(weekofyear($\"timestamp\")).distinct().show()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321118674E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"865842be-464e-4a9d-9163-7882140e810e"},{"version":"CommandV1","origId":503877321546523,"guid":"c764dd2c-5551-4016-9cca-e0f71fc0ef90","subtype":"command","commandType":"auto","position":46.0,"command":"// How many days of data is there?\npageviewsTimestampDF.select(dayofyear($\"timestamp\")).distinct().count","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321119099E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"de4836d0-53d8-4a50-8f2a-2e2cb9cdb763"},{"version":"CommandV1","origId":503877321546524,"guid":"e33b13ac-d958-4997-807a-922e70e6b15d","subtype":"command","commandType":"auto","position":47.0,"command":"%md There is 41 days of data.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"74e2de3b-85b9-4877-be62-2dd965cc1626"},{"version":"CommandV1","origId":503877321546525,"guid":"110e6d66-daa2-4e1c-b3dc-a9f7487ad54f","subtype":"command","commandType":"auto","position":48.0,"command":"%md ####![Wikipedia + Spark Logo Tiny](http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/general/wiki_spark_small.png) Q-3) What is the avg/min/max for the number of requests received for Mobile and Desktop views?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"416f8a94-7498-436a-8cdc-3bb46b64c9f8"},{"version":"CommandV1","origId":503877321546526,"guid":"d8f19d7c-70b9-4ac4-b39a-317c8912ff32","subtype":"command","commandType":"auto","position":49.0,"command":"%md To understand our data better, let's look at the average, minimum and maximum number of requests received for mobile, then desktop page views over every 1 second interval:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a13e4d8e-a017-45b5-a23d-c4d65fcb4a72"},{"version":"CommandV1","origId":503877321546527,"guid":"6f845244-141a-43e7-b80e-44428e4127ee","subtype":"command","commandType":"auto","position":50.0,"command":"// Look at mobile statistics\npageviewsTimestampDF.filter(\"site = 'mobile'\").select(avg($\"requests\"), min($\"requests\"), max($\"requests\")).show()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321123564E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3e3ec53c-bcf8-4690-86c0-eedc2d1d0498"},{"version":"CommandV1","origId":503877321546528,"guid":"6aa3ac2d-1550-4faa-a89f-24e58fdbea1b","subtype":"command","commandType":"auto","position":51.0,"command":"// Look at desktop statistics\npageviewsTimestampDF.filter(\"site = 'desktop'\").select(avg($\"requests\"), min($\"requests\"), max($\"requests\")).show()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321123914E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e19e6873-57f7-4565-bee2-836ef4d2aa7f"},{"version":"CommandV1","origId":503877321546529,"guid":"eb790809-e316-4d55-b781-802202c260e4","subtype":"command","commandType":"auto","position":52.0,"command":"%md There certainly appears to be more requests for the desktop site.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"87b3b771-0015-4707-8de6-c8470efaa83c"},{"version":"CommandV1","origId":503877321546530,"guid":"bca80f6d-65f1-47ee-9256-50e82490ac5e","subtype":"command","commandType":"auto","position":53.0,"command":"%md ####![Wikipedia + Spark Logo Tiny](http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/general/wiki_spark_small.png) Q-4) Which day of the week does Wikipedia get the most traffic?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6433e812-a37d-4af9-95b4-9829d95b214f"},{"version":"CommandV1","origId":503877321546531,"guid":"93052653-df91-43fd-8f5a-0eb76700e356","subtype":"command","commandType":"auto","position":54.0,"command":"%md Think about how we can accomplish this. We need to pull out the day of the week (like Mon, Tues, etc) from each row, and then sum up all of the requests by day.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c8c28e7c-4adf-404e-8257-1fc5ca16bd5e"},{"version":"CommandV1","origId":503877321546532,"guid":"cc276487-b053-445e-9556-9ead83ebda2b","subtype":"command","commandType":"auto","position":55.0,"command":"%md First, use the `date_format` function to extract out the day of the week from the timestamp and rename the column as \"Day of week\".\n\nThen we'll sum up all of the requests for each day and show the results.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"bf19fa1d-3225-48d2-81d2-a25bad48d53f"},{"version":"CommandV1","origId":503877321546533,"guid":"b2ffb84f-953c-401d-9575-b9add79b4ae7","subtype":"command","commandType":"auto","position":56.0,"command":"// Notice the use of alias() to rename the new column\n// \"E\" is a pattern in the SimpleDataFormat class in Java that extracts out the \"Day in Week\"\"\n\n// Create a new DataFrame named pageviewsByDayOfWeekDF and cache it\nval pageviewsByDayOfWeekDF = pageviewsTimestampDF.groupBy(date_format(($\"timestamp\"), \"E\").alias(\"Day of week\")).sum()\n\n// Cache the DataFrame with a human-readable name\npageviewsByDayOfWeekDF.registerTempTable(\"pageviews_by_DOW\")\nsqlContext.cacheTable(\"pageviews_by_DOW\")\n\n// Show what is in the new DataFrame\npageviewsByDayOfWeekDF.show()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321128504E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"570ff1db-36d1-4c24-9f64-5e4ac9f9eadd"},{"version":"CommandV1","origId":503877321546534,"guid":"d1cfcf42-2ba8-4214-b8f6-736a2cb424ab","subtype":"command","commandType":"auto","position":57.0,"command":"%md You can learn more about date/time patterns, like \"E\", in the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html\" target=\"_blank\">Java SimpleDateFormat</a> documentation.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ab0153ac-8051-43a8-8c2a-9e6bf774fcd1"},{"version":"CommandV1","origId":503877321546535,"guid":"c9eae146-0bbe-4bb6-b968-74c8864f77b3","subtype":"command","commandType":"auto","position":58.0,"command":"%md It would help to visualize the results:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"99eb98b6-0ea0-48af-84fe-1c45216bbb44"},{"version":"CommandV1","origId":503877321546536,"guid":"1dd60400-a3d2-4ef5-b4f6-f8cf83e7cd9b","subtype":"command","commandType":"auto","position":59.0,"command":"// Use orderBy() to sort by day of week\ndisplay(pageviewsByDayOfWeekDF.orderBy($\"Day of week\"))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321137946E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"barChart","width":"660","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"aaf75e96-9140-4147-a9aa-f47b80e3f84a"},{"version":"CommandV1","origId":503877321546537,"guid":"7b018b8f-d549-42e3-9b20-96a1af49ba17","subtype":"command","commandType":"auto","position":60.0,"command":"%md Click on the Bar chart icon above to convert the table into a bar chart:\n\n#![Bar Chart](http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/pageviews/barchart_icon.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b11946b9-54d9-4089-81df-01adb8ab0d7e"},{"version":"CommandV1","origId":503877321546538,"guid":"50468f84-9b2e-45d3-b895-f0cbd21c2c3c","subtype":"command","commandType":"auto","position":61.0,"command":"%md Under the \"Plot Options\" button above, you might also need to set the Keys as \"Day of week\" and the values as \"sum(requests)\".","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8a2b06a1-6a63-4c8c-b20b-3fd7d8274e4b"},{"version":"CommandV1","origId":503877321546539,"guid":"baff8198-9766-484c-a3ed-90ace3b0f58b","subtype":"command","commandType":"auto","position":62.0,"command":"%md Hmm, the ordering of the days of the week is off, because the `orderBy()` operation is ordering the days of the week alphabetically. Instead of that, let's start with Monday and end with Sunday. To accomplish this, we'll write a short User Defined Function (UDF) to prepend each `Day of week` with a number.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c9ad62c1-584c-49eb-a9c2-70d93d99380d"},{"version":"CommandV1","origId":503877321546540,"guid":"bde4d603-13a3-47da-90d8-450f8e3252c4","subtype":"command","commandType":"auto","position":63.0,"command":"%md ####![Spark Logo Tiny](http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/general/logo_spark_tiny.png) **User Defined Functions (UDFs)**","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c3dcf4df-ad9d-4e6b-9e42-283b44f16d97"},{"version":"CommandV1","origId":503877321546541,"guid":"f3a805a5-ccba-4db4-86ec-8bcfe123708a","subtype":"command","commandType":"auto","position":64.0,"command":"%md A UDF lets you code your own logic for processing column values during a DataFrame query. \n\nFirst, let's create a Scala match expression for pattern matching:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"cc2ea878-a77b-4729-af13-a5c54d58c924"},{"version":"CommandV1","origId":503877321546542,"guid":"08ce2289-c33b-4b8c-8492-36fab2a360e0","subtype":"command","commandType":"auto","position":65.0,"command":"def matchDayOfWeek(day:String): String = {\n  day match {\n    case \"Mon\" => \"1-Mon\"\n    case \"Tue\" => \"2-Tue\"\n    case \"Wed\" => \"3-Wed\"\n    case \"Thu\" => \"4-Thu\"\n    case \"Fri\" => \"5-Fri\"\n    case \"Sat\" => \"6-Sat\"\n    case \"Sun\" => \"7-Sun\"\n    case _ => \"UNKNOWN\"\n  }\n}","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321149154E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"67ac2ab3-4d83-4c6f-9db8-f20f143c9df2"},{"version":"CommandV1","origId":503877321546543,"guid":"06381a1e-2272-4c10-a06c-ee98fcb12e04","subtype":"command","commandType":"auto","position":66.0,"command":"%md Test the match expression:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b259d285-d2f0-4b4f-b3e2-f1f652eb584d"},{"version":"CommandV1","origId":503877321546544,"guid":"f29a3d4c-f44f-46f8-8229-e70695bf0c24","subtype":"command","commandType":"auto","position":67.0,"command":"matchDayOfWeek(\"Tue\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321154088E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d27eb6a6-c7ba-49ea-acf4-5f7953fd899d"},{"version":"CommandV1","origId":503877321546545,"guid":"7baabadf-be16-4699-9c78-841f1d1e3aa6","subtype":"command","commandType":"auto","position":68.0,"command":"%md Great, it works! Now define a UDF named `prependNumber`:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"09963c9b-cfb7-4336-9e64-409dc3898f74"},{"version":"CommandV1","origId":503877321546546,"guid":"7a2f3199-3325-452c-a77b-cb4e613bc9dc","subtype":"command","commandType":"auto","position":69.0,"command":"val prependNumberUDF = sqlContext.udf.register(\"prependNumber\", (s: String) => matchDayOfWeek(s))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321159726E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f9df0a28-4eb7-4d36-be9a-c59eb90cda5d"},{"version":"CommandV1","origId":503877321546547,"guid":"55a2ad4b-3d55-44bb-a3eb-b4de978704f0","subtype":"command","commandType":"auto","position":70.0,"command":"%md Test the UDF to prepend the `Day of Week` column in the DataFrame with a number:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e11d77d1-f966-46e5-8ff4-8b8ed667cd2e"},{"version":"CommandV1","origId":503877321546548,"guid":"e91c3419-174d-4ec0-9c04-3bcf0d4b6822","subtype":"command","commandType":"auto","position":71.0,"command":"pageviewsByDayOfWeekDF.select(prependNumberUDF($\"Day of week\")).show(7)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321163766E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"abe4b9c3-f0b1-4cc3-8b05-9c86fb31a996"},{"version":"CommandV1","origId":503877321546549,"guid":"7423d703-1858-49eb-b559-69aabe681bd7","subtype":"command","commandType":"auto","position":72.0,"command":"%md Our UDF looks like it's working. Next, let's apply the UDF and also order the x axis from Mon -> Sun:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ce545961-1cf4-4569-87ab-54e6f85c837d"},{"version":"CommandV1","origId":503877321546550,"guid":"8b390fa1-b116-408e-9a80-323baff75b82","subtype":"command","commandType":"auto","position":73.0,"command":"display((pageviewsByDayOfWeekDF.withColumnRenamed(\"sum(requests)\", \"total requests\")\n  .select(prependNumberUDF($\"Day of week\"), $\"total requests\")\n  .orderBy(\"UDF(Day of week)\")))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321168646E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"barChart","width":"660","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ba1dc99a-67f7-4021-8475-7ec4f85b7c86"},{"version":"CommandV1","origId":503877321546551,"guid":"88913023-bcab-47fc-8327-a8806c2534d0","subtype":"command","commandType":"auto","position":74.0,"command":"%md Click on the bar chart icon again to convert the above table into a Bar Chart. Also, under the Plot Options, you may need to set the Keys as \"UDF(Day of week)\" and the values as \"total requests\".","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7f2e5629-4d7d-4a11-9d4f-f79f05d9749a"},{"version":"CommandV1","origId":503877321546552,"guid":"74593ebc-f6bd-44c1-94aa-1573687cf674","subtype":"command","commandType":"auto","position":75.0,"command":"%md Wikipedia seems to get significantly more traffic on Mondays than other days of the week. Hmm...","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ed89d63f-7d95-4244-b834-46576c694ba7"},{"version":"CommandV1","origId":503877321546553,"guid":"cfc9f865-17de-4eeb-9439-18b595a274e4","subtype":"command","commandType":"auto","position":76.0,"command":"%md ####![Wikipedia + Spark Logo Tiny](http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/general/wiki_spark_small.png) Q-5) Can you visualize both the mobile and desktop site requests in a line chart to compare traffic between both sites by day of the week?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4922d7e5-ea9d-4fcd-b31a-82c14a218771"},{"version":"CommandV1","origId":503877321546554,"guid":"082205bd-dfae-424e-8452-cb34b8d34167","subtype":"command","commandType":"auto","position":77.0,"command":"%md First, graph the mobile site requests:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"29da2a68-878e-4609-af3d-2586e4381f88"},{"version":"CommandV1","origId":503877321546555,"guid":"1e955863-8da1-47b8-807a-4a73928341e1","subtype":"command","commandType":"auto","position":78.0,"command":"val mobileViewsByDayOfWeekDF = pageviewsTimestampDF.filter(\"site = 'mobile'\").groupBy(date_format(($\"timestamp\"), \"E\").alias(\"Day of week\")).sum().withColumnRenamed(\"sum(requests)\", \"total requests\").select(prependNumberUDF($\"Day of week\"), $\"total requests\").orderBy(\"UDF(Day of week)\").toDF(\"DOW\", \"mobile_requests\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321176835E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"614ab839-f4f2-42b2-a318-24282a7f9546"},{"version":"CommandV1","origId":503877321546556,"guid":"3e77610c-7bef-4440-b6d1-892ea9ab677b","subtype":"command","commandType":"auto","position":79.0,"command":"%md Before we go any further, that is a lot of code strung together... let's break it down just a little bit...","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8de2225b-82a8-4786-91b3-8a72cdffabce"},{"version":"CommandV1","origId":503877321546557,"guid":"d5a62237-74fb-4ae0-af6a-817a7442d6a2","subtype":"command","commandType":"auto","position":80.0,"command":"val mobileDF = pageviewsTimestampDF.filter(\"site = 'mobile'\")\nval groupedData = mobileDF.groupBy(date_format(($\"timestamp\"), \"E\").alias(\"Day of week\"))\nval sumDF = groupedData.sum().withColumnRenamed(\"sum(requests)\", \"total requests\")\nval selectDF = sumDF.select(prependNumberUDF($\"Day of week\"), $\"total requests\")\nval orderedDF = selectDF.orderBy(\"UDF(Day of week)\")\nval mobileViewsByDayOfWeekDF = orderedDF.toDF(\"DOW\", \"mobile_requests\")\n\n// Cache this DataFrame\nmobileViewsByDayOfWeekDF.cache()\n\ndisplay(mobileViewsByDayOfWeekDF)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321180132E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"barChart","width":"660","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"536c2a2b-c0ad-46ae-a2dd-eba13f1abb3b"},{"version":"CommandV1","origId":503877321546558,"guid":"35df1292-3720-46fe-bbef-acfd83ae8c62","subtype":"command","commandType":"auto","position":81.0,"command":"%md Click on the bar chart icon again to convert the above table into a Bar Chart. \n\nAlso, under the Plot Options, you may need to set the Keys as \"DOW\" and the values as \"mobile requests\".","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6ad1d8e0-9fd3-451f-be61-915ae36b1bc4"},{"version":"CommandV1","origId":503877321546559,"guid":"e7a8571d-4565-43a3-949c-e45f05fbc649","subtype":"command","commandType":"auto","position":82.0,"command":"%md With a DataFrame for mobile views, let's create one more for desktops:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"cfc63962-837a-4403-882b-27003ac004a1"},{"version":"CommandV1","origId":503877321546560,"guid":"82b60446-d704-4d12-be26-eceb4162955c","subtype":"command","commandType":"auto","position":83.0,"command":"val desktopViewsByDayOfWeekDF = pageviewsTimestampDF\n  .filter(\"site = 'desktop'\")\n  .groupBy(date_format(($\"timestamp\"), \"E\").alias(\"Day of week\")).sum().withColumnRenamed(\"sum(requests)\", \"total requests\")\n  .select(prependNumberUDF($\"Day of week\"), $\"total requests\")\n  .orderBy(\"UDF(Day of week)\")\n  .toDF(\"DOW\", \"desktop_requests\")\n\n// Cache this DataFrame\ndesktopViewsByDayOfWeekDF.cache()\n\ndisplay(desktopViewsByDayOfWeekDF)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321194156E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2d882f92-3159-4438-942e-6e03b89c26bf"},{"version":"CommandV1","origId":503877321546561,"guid":"11c82a47-3f34-438e-bae3-cd349415b8a9","subtype":"command","commandType":"auto","position":84.0,"command":"%md We now have two DataFrames: \n* **desktopViewsByDayOfWeekDF**\n* **mobileViewsByDayOfWeekDF**\n\nWe can then perform a join on the two DataFrames to create a thrid DataFrame, **allViewsByDayOfWeekDF**","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a5370b95-6f83-46d5-a8bd-baeace4f826b"},{"version":"CommandV1","origId":503877321546562,"guid":"ba0fcb8b-9e5b-44c0-be42-ecbda47d78a0","subtype":"command","commandType":"auto","position":85.0,"command":"val allViewsByDayOfWeekDF = mobileViewsByDayOfWeekDF\n  .join(desktopViewsByDayOfWeekDF, \n        mobileViewsByDayOfWeekDF(\"DOW\") === desktopViewsByDayOfWeekDF(\"DOW\"))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321198367E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"efdaef4c-79fa-4fda-856d-02542efe0152"},{"version":"CommandV1","origId":503877321546563,"guid":"bbebc7de-3244-4e06-8d52-c6997214e736","subtype":"command","commandType":"auto","position":86.0,"command":"%md And lastly, we can create a line chart to visualize mobile vs. desktop page views:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d24e0f1c-9d9d-46e7-bba3-b457433ec1f9"},{"version":"CommandV1","origId":503877321546564,"guid":"20c9d870-d5dc-4727-8fff-3d2412441fd1","subtype":"command","commandType":"auto","position":87.0,"command":"display(allViewsByDayOfWeekDF)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":1.477321201935E12,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"lineChart","width":"660","height":"auto","xColumns":["DOW"],"yColumns":["desktop_requests","mobile_requests"],"pivotColumns":[],"pivotAggregation":"sum","customPlotOptions":{"lineChart":[]},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"bmc@databricks.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e4b154b7-0198-48a2-9842-ebc12906ce07"},{"version":"CommandV1","origId":503877321546565,"guid":"9dbe3cdf-e42f-41d8-8f82-20f3092a7b34","subtype":"command","commandType":"auto","position":88.0,"command":"%md Click on the line chart icon above to convert the table into a line chart:\n\n#![Line Chart 1](http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/pageviews/linechart_1.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3bac0669-6a1f-44c4-bb89-8b7db8874cd3"},{"version":"CommandV1","origId":503877321546566,"guid":"50c2e878-c6ce-4c0d-ae42-00f260d25404","subtype":"command","commandType":"auto","position":89.0,"command":"%md Then click on Plot Options:\n\n#![Line Chart 2](http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/pageviews/linechart_2.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"095a9f36-0a00-4524-984f-07b758e6603a"},{"version":"CommandV1","origId":503877321546567,"guid":"fdee7463-e8c6-435d-84ba-db7b9da87af2","subtype":"command","commandType":"auto","position":90.0,"command":"%md Finally customize the plot as seen below and click Apply:\n\n*(You will have to drag and drop fields from the left pane into either Keys or Values)*\n\n#![Line Chart 3](http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/pageviews/linechart_3.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d7854363-3b2a-4a44-b70e-749f6646a87e"},{"version":"CommandV1","origId":503877321546568,"guid":"32d80b3b-e22f-4da3-b9df-2e9dbdca642f","subtype":"command","commandType":"auto","position":91.0,"command":"%md Hmm, did you notice that the line chart is a bit deceptive? Beware that it looks like there were almost zero mobile site requests because the y-axis of the line graph starts from 600,000,000 instead of 0.\n\n<img src=\"http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/pageviews/linechart_4.png\" style=\"height: 300px\" alt=\"Line chart 4\"/>","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7eac1599-8b6f-4406-b055-6ad1199c1d54"},{"version":"CommandV1","origId":503877321546569,"guid":"fcdbb077-abed-4efc-a777-f1fbc52ff837","subtype":"command","commandType":"auto","position":92.0,"command":"%md Since the y-axis is off, it may appear as if there were almost zero mobile site requests. We can restore a zero baseline by using Matplotlib. But first...","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e4136faf-62ea-4e21-9bbe-00332bc0dd27"},{"version":"CommandV1","origId":503877321546570,"guid":"f9c7cda6-b664-42f5-902d-135b499b141f","subtype":"command","commandType":"auto","position":93.0,"command":"%md ####![Wikipedia + Spark Logo Tiny](http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/general/wiki_spark_small.png) Q-6) Why is there so much more traffic on Monday vs. other days of the week?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a93bcf39-d919-40f9-aadc-13c6969f7d95"},{"version":"CommandV1","origId":503877321546571,"guid":"93086116-3d86-4b45-b239-765ed0c26d58","subtype":"command","commandType":"auto","position":94.0,"command":"%md ** Challenge 4:** Can you figure out exactly why there was so much more traffic on Mondays?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"af8ed6ce-5727-4ae0-9cff-7b4d74106047"},{"version":"CommandV1","origId":503877321546572,"guid":"3056c205-4d86-4ceb-a57c-d12ece046665","subtype":"command","commandType":"auto","position":95.0,"command":"// Type your answer here...","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f89640c3-cff5-4d45-b4cc-033a830774cc"},{"version":"CommandV1","origId":503877321546573,"guid":"ac7c7cb4-ca82-487f-a5df-ce004b7ed7c7","subtype":"command","commandType":"auto","position":96.0,"command":"%md ####![Databricks Logo Tiny](http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/general/logo_databricks_tiny.png) Bonus: Matplotlib visualization","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"80c9ce16-d1c9-4a81-9c02-6a25b3279366"},{"version":"CommandV1","origId":503877321546574,"guid":"adabb71e-53f9-4b5a-a1d9-1e6659517712","subtype":"command","commandType":"auto","position":97.0,"command":"%md Let's use Matplotlib to fix the line chart visualization above so that the y-axis starts with 0.\n\nDatabricks notebooks let you move seemlessly between Scala and Python code within the same notebook by using `%python` to declare python cells:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d3c3ad72-3207-4d01-b71a-c9cdfaf2cf15"},{"version":"CommandV1","origId":503877321546575,"guid":"30038b4a-6702-43db-bc70-4c9f58ff951e","subtype":"command","commandType":"auto","position":98.0,"command":"%python\n\n# Create a function named simpleMath\ndef simpleMath(x, y):\n  z = x + y\n  print \"z is: \", z","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d7461efc-46cb-4e48-b5d8-863e459415e2"},{"version":"CommandV1","origId":503877321546576,"guid":"2bd64651-7f9d-4443-8a93-2adb4147b5a1","subtype":"command","commandType":"auto","position":99.0,"command":"%python\n\nsimpleMath(2, 3)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"440473fd-1d3f-459f-b3ea-6fcff8a19a4d"},{"version":"CommandV1","origId":503877321546577,"guid":"a1cdb8d9-52bd-4838-8d37-0873a2702ff2","subtype":"command","commandType":"auto","position":100.0,"command":"%md You can also import Matplotlib and easily create more sophisticated plots:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b506a33a-88a1-403f-b581-65df548ffb2b"},{"version":"CommandV1","origId":503877321546578,"guid":"ad7ba49e-d594-4e74-82ef-df18de5397da","subtype":"command","commandType":"auto","position":101.0,"command":"%python\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig1, ax = plt.subplots()\n\n# The first list of four numbers is for the x-axis and the next list is for the y-axis\nax.plot([1,2,3,4], [1,4,9,16])\n\ndisplay(fig1)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1f858400-b5b1-4c2d-9116-d193f2a202b1"},{"version":"CommandV1","origId":503877321546579,"guid":"f3f188af-ced8-418a-b15f-d47cf92f1c4f","subtype":"command","commandType":"auto","position":102.0,"command":"%md Recall that we had earlier cached 2 DataFrames, one with desktop views by day of week and another with mobile views by day of week:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"596b2116-e0b3-4cf4-b630-d425d11e589b"},{"version":"CommandV1","origId":503877321546580,"guid":"e3f4877b-5222-44bc-912f-83536ad12009","subtype":"command","commandType":"auto","position":103.0,"command":"desktopViewsByDayOfWeekDF.show()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"430ce6a4-aa7a-491b-85a7-558ccf2ccbd4"},{"version":"CommandV1","origId":503877321546581,"guid":"989ad205-b707-4ba6-8d38-602f2e3d15b3","subtype":"command","commandType":"auto","position":104.0,"command":"mobileViewsByDayOfWeekDF.show()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"51ceda1b-9605-4b57-9b24-b8ebda854ce0"},{"version":"CommandV1","origId":503877321546582,"guid":"cd16dd08-f399-4eb1-a9ea-71309893e500","subtype":"command","commandType":"auto","position":105.0,"command":"%md First let's graph only the desktop views by day of week:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"914c7c21-4887-4d50-9090-a19534d09309"},{"version":"CommandV1","origId":503877321546583,"guid":"d55ba137-b4e8-4daa-a18f-0fb846c74804","subtype":"command","commandType":"auto","position":106.0,"command":"%python\n\nfig2, ax = plt.subplots()\n\n# Notice that we are providing the coordinate manually for the x-axis\nax.plot([0,1,2,3,4,5,6], [1566792176,1346947425,1346330702,1306170813,1207342832,1016427413,947169611], 'ro')\n\n# The axis() command takes a list of [xmin, xmax, ymin, ymax] and specifies the viewport of the axes\nax.axis([0, 7, 0, 2000000000])\n\ndisplay(fig2)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a8575017-5cad-4b29-b2d8-415686a4b846"},{"version":"CommandV1","origId":503877321546584,"guid":"e4169fad-c426-4033-9c4a-6679653d76c8","subtype":"command","commandType":"auto","position":107.0,"command":"%md Next graph only the mobile views by day of week:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7c16beb7-0dcb-47f0-a077-5ceb16721ce9"},{"version":"CommandV1","origId":503877321546585,"guid":"c3fff29d-e341-43b6-83c9-fc5ec034b68f","subtype":"command","commandType":"auto","position":108.0,"command":"%python\n\nfig3, ax = plt.subplots()\nax.plot([0,1,2,3,4,5,6], [790026669,648087459,631284694,625338164,635169886,646334635,629556455], 'bo')\n\n# The axis() command takes a list of [xmin, xmax, ymin, ymax] and specifies the viewport of the axes\nax.axis([0, 7, 0, 2000000000])\n\ndisplay(fig3)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"54fd5618-da47-416a-b0f5-06b21386f0db"},{"version":"CommandV1","origId":503877321546586,"guid":"b668c4bb-52c8-4ce2-a2dc-fe4f807f3d4b","subtype":"command","commandType":"auto","position":109.0,"command":"%md Finally, let's combine the 2 plots above and also programatically get the requests data from a DataFrame (instead of manually entering the y-axis corrdinates).\n\nWe need a technique to access the Scala DataFrames from the Python cells. To do this, we can register a temporary table in Scala, then call that table from Python.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8e050c5a-78f6-40c5-a1f6-11605455a9f5"},{"version":"CommandV1","origId":503877321546587,"guid":"69822060-c06c-4b8b-8de3-d535e062f461","subtype":"command","commandType":"auto","position":110.0,"command":"mobileViewsByDayOfWeekDF.registerTempTable(\"mobileViewsByDOW\")\ndesktopViewsByDayOfWeekDF.registerTempTable(\"desktopViewsByDOW\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ccebab80-8d64-4989-a983-a1d35b5396ca"},{"version":"CommandV1","origId":503877321546588,"guid":"d0819747-7c6e-425e-ba8b-6c7f5eb3c7df","subtype":"command","commandType":"auto","position":111.0,"command":"%python\n\nmobileViewsPythonDF = sqlContext.read.table(\"mobileViewsByDOW\")\n\npythonListForMobileAll = [list(r) for r in mobileViewsPythonDF.collect()]\n\npythonListForMobileRequests = []\n\nfor item in pythonListForMobileAll:\n        pythonListForMobileRequests.append(item[1])\n\npythonListForMobileRequests","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e1567b65-7338-45c8-b137-ded268b1732a"},{"version":"CommandV1","origId":503877321546589,"guid":"d957ede6-2fc0-4549-9e07-960229e12968","subtype":"command","commandType":"auto","position":112.0,"command":"%python\n\ndesktopViewsPythonDF = sqlContext.read.table(\"desktopViewsByDOW\")\n\npythonListForDesktopAll = [list(r) for r in desktopViewsPythonDF.collect()]\n\npythonListForDesktopRequests = []\n\nfor item in pythonListForDesktopAll:\n        pythonListForDesktopRequests.append(item[1])\n\npythonListForDesktopRequests","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7e5bfcd9-6c23-4723-928b-efc6d008ebca"},{"version":"CommandV1","origId":503877321546590,"guid":"b8b89db9-fe2d-4b60-ac38-628bb8a37ea8","subtype":"command","commandType":"auto","position":113.0,"command":"%md We now have our two Python lists::","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"81e56175-fb98-41a5-9de6-f3880f7f91c1"},{"version":"CommandV1","origId":503877321546591,"guid":"b385129b-99c8-49e9-93ac-98c8d0af690f","subtype":"command","commandType":"auto","position":114.0,"command":"%python\n\npythonListForMobileRequests","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c143a96f-2b44-422f-aea3-67efc44a7cd0"},{"version":"CommandV1","origId":503877321546592,"guid":"4c8312a6-7bcc-4cd9-aeda-1cc155644284","subtype":"command","commandType":"auto","position":115.0,"command":"%python\n\npythonListForDesktopRequests","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ff049d4f-1e85-4ac7-95b7-da88cd36a28e"},{"version":"CommandV1","origId":503877321546593,"guid":"01473acc-388d-4077-aa05-636e2431074f","subtype":"command","commandType":"auto","position":116.0,"command":"%md Finally, we are ready to plot both Desktop and Mobile requests using our python lists:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"00882ebd-e3ad-495e-9267-89dfaf1da231"},{"version":"CommandV1","origId":503877321546594,"guid":"16d74234-82cf-489e-97ba-a47afac17a69","subtype":"command","commandType":"auto","position":117.0,"command":"%python\n\nfig3, ax = plt.subplots()\n\nx_axis = [0,1,2,3,4,5,6]\n\nax.plot(x_axis, pythonListForDesktopRequests, marker='o', linestyle='--', color='r', label='Desktop')\nax.plot(x_axis, pythonListForMobileRequests, marker='o', label='Mobile')\n\nax.set_title('Desktop vs Mobile site requests')\n\nax.set_xlabel('Days of week')\nax.set_ylabel('# of requests')\n\nax.legend()\n\n# The axis() command takes a list of [xmin, xmax, ymin, ymax] and specifies the viewport of the axes\nax.axis([0, 6, 0, 2000000000])\n\nax.xaxis.set_ticks(range(len(x_axis)), ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'])\n\ndisplay(fig3)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"99d8c4fd-0a07-442e-a34b-e353092293b7"}],"dashboards":[],"guid":"145639b6-014c-48d0-804f-1f3a9494dded","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}