{"version":"NotebookV1","origId":503877321547243,"name":"05-DE-RDD-Datasets","language":"scala","commands":[{"version":"CommandV1","origId":503877321547245,"guid":"a381752f-b31e-48db-b7a3-283c33396b47","subtype":"command","commandType":"auto","position":1.0,"command":"%md\n\n![Wikipedia Logo](http://sameerf-dbc-labs.s3-website-us-west-2.amazonaws.com/data/wikipedia/images/w_logo_for_labs.png)\n\n### Analyzing the Wikipedia PageCounts with RDDs and Datasets\n#### Time to complete: 20 minutes\n\n#### Business questions:\n* Question # 1) How many unique articles in English Wikipedia were requested in the past hour?\n* Question # 2) How many requests total did English Wikipedia get in the past hour?\n* Question # 3) How many requests total did each Wikipedia project get total during this hour?\n\n\n#### Technical Accomplishments:\n\n* Understand the difference between Dataframes, RDDs and Datasets\n* Learn how to use the following RDD actions: `count`, `take`, `takeSample`, `collect`\n* Learn the following RDD transformations: `filter`, `map`, `groupByKey`, `reduceByKey`, `sortBy`\n* Learn how to convert your RDD code to Datasets\n* Learn how to cache an RDD or Dataset and view its number of partitions and total size in memory\n* Learn advanced persistence options like MEMORY_AND_DISK\n* Learn how to define a case class to organize data in an RDD or Dataset into objects","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7bba7f68-bb6c-4f86-9ad9-9cb007fb9df5"},{"version":"CommandV1","origId":503877321547246,"guid":"20c64a2e-7618-431a-b0e3-f8ed20117322","subtype":"command","commandType":"auto","position":2.0,"command":"%md Attach to, and then restart your cluster first to clear out old memory caches and get to a default, standard environment. The restart should take 1 - 2 minutes.\n\n![Restart Cluster](http://curriculum-release.s3-website-us-west-2.amazonaws.com/wiki-book/general/restart_cluster.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"362f90e0-c42e-49e1-9dc0-bdaffacf8d2a"},{"version":"CommandV1","origId":503877321547247,"guid":"3a3c438b-105d-40db-a9cb-d2c2b71987eb","subtype":"command","commandType":"auto","position":3.0,"command":"%fs ls /mnt/wikipedia-readonly/pagecounts/staging/","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"af1725d7-b98d-4b1d-8cc2-fbabf54bf096"},{"version":"CommandV1","origId":503877321547248,"guid":"0a99d6e0-2ce6-4d50-ad62-fa42636c6e54","subtype":"command","commandType":"auto","position":4.0,"command":"%md Notice that the file name has the date and time of when the file was created by the Wikimedia Foundation. This file contains recent web traffic data to Wikipedia, that is less than 1 hour old. It captures 1 hour of page counts to all of Wikipedia languages and projects.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e3acbbbe-d210-40f8-933b-dc0d0c8f41ac"},{"version":"CommandV1","origId":503877321547249,"guid":"b5186703-7053-4dd1-8028-d63ffaaf6ce9","subtype":"command","commandType":"auto","position":5.0,"command":"%md\n### RDDs\nRDDs can be created by using the Spark Context object's `textFile()` method.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4b9dffae-7823-49f9-9cb7-52c9292bc9ba"},{"version":"CommandV1","origId":503877321547250,"guid":"56a3ebec-29d9-41c3-80da-ba47a502d64a","subtype":"command","commandType":"auto","position":6.0,"command":"// In Databricks, the SparkContext is already created for you as the variable sc\nsc","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c64d1d56-3771-43f2-9959-4a5bdfb757bc"},{"version":"CommandV1","origId":503877321547251,"guid":"3744c523-88f1-4139-ba14-d88a628dc0b7","subtype":"command","commandType":"auto","position":7.0,"command":"%md Create an RDD from the recent pagecounts file:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3c4f4975-402e-43d1-8324-6089646b48c8"},{"version":"CommandV1","origId":503877321547252,"guid":"fe812f8d-591e-43b5-8ece-1b07a700e350","subtype":"command","commandType":"auto","position":8.0,"command":"// Notice that this returns a RDD of Strings\nval pagecountsRDD = sc.textFile(\"dbfs:/mnt/wikipedia-readonly/pagecounts/staging/\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7d3adfc1-02bf-4c06-911b-ed26a728bfe1"},{"version":"CommandV1","origId":503877321547253,"guid":"bf1af126-06f9-436b-8288-d435543fa363","subtype":"command","commandType":"auto","position":9.0,"command":"%md The `count` action counts how many items (lines) total are in the RDD (this requires a full scan of the file):","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1e452241-ce01-4bc1-9676-6d77d85e521d"},{"version":"CommandV1","origId":503877321547254,"guid":"10e3c662-6d6c-4833-a265-4b743668ab34","subtype":"command","commandType":"auto","position":10.0,"command":"pagecountsRDD.count()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d1bfa075-5df0-4df9-8835-8fbda3635591"},{"version":"CommandV1","origId":503877321547255,"guid":"8c1234a7-9af5-4547-bbe2-f42b913a08aa","subtype":"command","commandType":"auto","position":11.0,"command":"%md The Spark UI will show that just one task read the entire file and the Input column should match the size of the file. For example, if the file were 72.4 MB, you would see:\n#![1 task](http://i.imgur.com/Xu9LjbU.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d515a3f3-ba77-496e-8ab1-bc521d8783c6"},{"version":"CommandV1","origId":503877321547256,"guid":"f8fcb25b-2909-4dff-86cb-2529bb84fda0","subtype":"command","commandType":"auto","position":12.0,"command":"%md So the count shows that there are about 5 - 9 million lines in the file. Notice that the `count()` action took 3 - 25 seconds to run b/c it had to read the entire file remotely from S3.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e8b7c779-48d3-4769-bce2-c5272c314953"},{"version":"CommandV1","origId":503877321547257,"guid":"0575a0e2-aaa2-41cc-9197-a8d4a4a35dde","subtype":"command","commandType":"auto","position":13.0,"command":"%md ** Challenge 1:**  Why is only one task being used to read this file? If the S3 input split is 64 MB, then why aren't two tasks being used? ","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b2e911d6-afda-4349-a334-f1949a2ed392"},{"version":"CommandV1","origId":503877321547258,"guid":"3e9a8fe8-b7e8-4ad5-a62d-186b44337d6e","subtype":"command","commandType":"auto","position":14.0,"command":"// Speculate upon your answer here","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2746191f-94ba-4a72-aac1-67f4c3832fbe"},{"version":"CommandV1","origId":503877321547259,"guid":"2e8696ca-9dd4-4821-8c76-451871f356cb","subtype":"command","commandType":"auto","position":15.0,"command":"%md You can use the take action to get the first 10 records:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6e25e290-c649-4daa-bc33-c5e3183feeac"},{"version":"CommandV1","origId":503877321547260,"guid":"a190b516-cf68-401e-aafd-54d2124144f6","subtype":"command","commandType":"auto","position":16.0,"command":"pagecountsRDD.take(10)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6c9dce95-7a0f-4251-9b71-ff388852bea2"},{"version":"CommandV1","origId":503877321547261,"guid":"b4c5af7e-07af-4c3e-b046-6d03e8e74532","subtype":"command","commandType":"auto","position":17.0,"command":"%md The take command is much faster because it does not have read the entire file, it only reads 10 lines:\n\n#![1 task](http://i.imgur.com/MpYvzeA.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b619852d-6e41-4949-a33e-5143c8d23bbf"},{"version":"CommandV1","origId":503877321547262,"guid":"0e14a23b-524e-4125-910e-63b0a9ce339c","subtype":"command","commandType":"auto","position":18.0,"command":"%md Unfortunately results returned by `.take(10)` are not very readable because `take()` returns an array and Scala simply prints the array with each element separated by a comma. \n\nWe can make the output prettier by traversing the array to print each record on its own line *(the .foreach() here is NOT a Spark operation, it's a local Scala operator)*:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9fcf86be-f91c-48f0-980f-a4baff7598dc"},{"version":"CommandV1","origId":503877321547263,"guid":"ac97bea6-d315-4623-b67b-4ada7ea8ee90","subtype":"command","commandType":"auto","position":19.0,"command":"pagecountsRDD.take(10).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a8122829-41bf-4e61-902e-a70fc94f9ad4"},{"version":"CommandV1","origId":503877321547264,"guid":"160fa8c1-c75d-407f-9f87-caddcf9e9233","subtype":"command","commandType":"auto","position":20.0,"command":"%md Notice that each line in the file actually contains 2 strings and 2 numbers, but our RDD is treating each line as a long string. We'll fix this typing issue shortly by using a custom parsing function.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4692005e-06e7-4854-bd15-26235f1b79e6"},{"version":"CommandV1","origId":503877321547265,"guid":"a3781ced-b69d-4f29-a432-dcbd69b951fb","subtype":"command","commandType":"auto","position":21.0,"command":"%md\n### Datasets\nDatasets can be created by using the SQL Context object's `read.text()` method:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d0b39cf2-53c0-4ae3-81b2-44270e172b5a"},{"version":"CommandV1","origId":503877321547266,"guid":"195b12c2-83ab-47da-a634-b4768dcacd90","subtype":"command","commandType":"auto","position":22.0,"command":"// Notice that this returns a Dataset of Strings\nval pagecountsDS = sqlContext.read.text(\"dbfs:/mnt/wikipedia-readonly/pagecounts/staging/\").as[String]","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ce7c1881-a341-419c-8bd4-762e56601c69"},{"version":"CommandV1","origId":503877321547267,"guid":"b4e07aad-fba8-4faf-aa47-823749ae3781","subtype":"command","commandType":"auto","position":23.0,"command":"// Notice that you get an array of Strings back\npagecountsDS.take(10)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"cc62b6de-d493-4ac4-9f6c-7a159f17ee8c"},{"version":"CommandV1","origId":503877321547268,"guid":"0d393e66-5248-4c82-9075-abb80d65f45b","subtype":"command","commandType":"auto","position":24.0,"command":"pagecountsDS.take(10).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ad33c677-1b4a-4166-9976-22c6a2552c82"},{"version":"CommandV1","origId":503877321547269,"guid":"0fb8269c-4451-4bb1-8072-013b2c4fb1e0","subtype":"command","commandType":"auto","position":25.0,"command":"%md\n### Caching RDDs vs Datasets in memory\nNext, let's cache both the `pagecountsRDD` and `pagecountsDS` into memory and see how much space they take.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e3180973-e90f-45fa-9a3f-8da087498a4e"},{"version":"CommandV1","origId":503877321547270,"guid":"423f519b-9dc4-4750-b78d-2826241737fb","subtype":"command","commandType":"auto","position":26.0,"command":"import org.apache.spark.storage.StorageLevel._","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7a0b156a-4973-4b20-989a-284338b0da1f"},{"version":"CommandV1","origId":503877321547271,"guid":"e5957925-1e2b-4b29-b4f0-0ba15a80b83f","subtype":"command","commandType":"auto","position":27.0,"command":"pagecountsRDD.setName(\"pagecountsRDD\").persist(MEMORY_AND_DISK).count","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4f944003-e0de-4f56-a879-fe835aaa6351"},{"version":"CommandV1","origId":503877321547272,"guid":"4238b8bd-bf88-4623-a40a-cda88e70b1d5","subtype":"command","commandType":"auto","position":28.0,"command":"pagecountsDS.persist(MEMORY_AND_DISK).count","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2d663253-c6fd-4b31-bdf8-a74f174f6d47"},{"version":"CommandV1","origId":503877321547273,"guid":"110710c9-ce35-416d-8748-158c31cee12c","subtype":"command","commandType":"auto","position":29.0,"command":"%md The Spark UI's Storage tab now shows both in memory. Notice that the Dataset is compressed in memory by default, so it takes up much less space *(your exact size numbers will vary depending how the last hours's file size)*:\n\n#![DS vs RDD](http://i.imgur.com/RsDpcD8.png)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"dc6dd075-9ca8-4d5a-bd9a-b1ec8fb01c1e"},{"version":"CommandV1","origId":503877321547274,"guid":"5f6f5b13-b929-477f-8601-962c334c79b7","subtype":"command","commandType":"auto","position":30.0,"command":"%md\n### Pagecount Parsing Function\n\nStoring each line in the file as a String item in the RDD or Dataset is not the most effective solution, since each line actually has 4 fields in it. \n\nLet's define a function, `parse`, to parse out the 4 fields on each line. Then we'll run the parse function on each item in the RDD or Dataset and create a new RDDs and Datasets with the correct types for each item.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"34910e4c-e238-4544-b14c-17e626d9b4be"},{"version":"CommandV1","origId":503877321547275,"guid":"c7103e9a-1b96-4b50-98be-67d8de4d7f77","subtype":"command","commandType":"auto","position":31.0,"command":"// Define a parsing function that takes in a line string and returns the 4 fields on each line, correctly typed\ndef parse(line:String) = {\n  val fields = line.split(' ') //Split the original line with 4 fields according to spaces\n  (fields(0), fields(1), fields(2).toInt, fields(3).toLong) // return the 4 fields with their correct data types\n}","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e3d7cfbd-3354-47b8-b3e4-9ca1b61c1999"},{"version":"CommandV1","origId":503877321547276,"guid":"7cae853d-3f85-4add-a444-a32dbaa83b68","subtype":"command","commandType":"auto","position":32.0,"command":"// Now we get back a RDD with the correct types, each line has 2 strings and 2 numbers\nval pagecountsParsedRDD = pagecountsRDD.map(parse)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5848c1a0-8429-49be-a995-5d2134651d0f"},{"version":"CommandV1","origId":503877321547277,"guid":"ae7fe55d-a411-4f74-9d99-47a16732213b","subtype":"command","commandType":"auto","position":33.0,"command":"// Here we get back a Dataset with the correct types, each line has 2 strings and 2 numbers\nval pagecountsParsedDS = pagecountsDS.map(parse)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"01369a68-067c-498b-95df-8fe555026591"},{"version":"CommandV1","origId":503877321547278,"guid":"8964f750-3a6e-471c-b3df-56d3661311c7","subtype":"command","commandType":"auto","position":34.0,"command":"%md\n### Revisiting caching RDDs vs Datasets in memory\nNext, let's cache both the new `pagecountsParsedRDD` and `pagecountsParsedDS` into memory and see how much space they take.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7331dccd-46ef-45cc-9ee4-caa29000e194"},{"version":"CommandV1","origId":503877321547279,"guid":"c3994a4d-c097-4ba4-bbd7-9e2f194a9e87","subtype":"command","commandType":"auto","position":35.0,"command":"pagecountsRDD","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ede8a0bb-7df1-45ae-8a4f-6337ef4cbf76"},{"version":"CommandV1","origId":503877321547280,"guid":"dcd9e620-42e5-46ce-9379-6fd25f85adfa","subtype":"command","commandType":"auto","position":36.0,"command":"pagecountsRDD.unpersist()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"07f4c855-6928-4e90-a9b2-281cd4d78e33"},{"version":"CommandV1","origId":503877321547281,"guid":"a1306d76-541e-4e54-9395-4cfde5cc8af4","subtype":"command","commandType":"auto","position":37.0,"command":"//90 seconds to run\npagecountsParsedRDD.setName(\"pagecountsParsedRDD\").persist(MEMORY_AND_DISK).count\n\n// Note that this will go to disk in Spark UI b/c it doesn't fit in memory!","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d6afe46e-8928-46e5-b9b3-14cdd4699387"},{"version":"CommandV1","origId":503877321547282,"guid":"d4441353-cf4d-4477-a10a-516317ecf2d2","subtype":"command","commandType":"auto","position":38.0,"command":"pagecountsDS","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"588aba3b-f278-4613-953c-6e3fa7bfe2ee"},{"version":"CommandV1","origId":503877321547283,"guid":"3a29f6b8-415d-4a9b-b9e6-04b6bd26939d","subtype":"command","commandType":"auto","position":39.0,"command":"pagecountsDS.unpersist()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"23cea6ce-9da2-4338-986a-64d8a2293ff1"},{"version":"CommandV1","origId":503877321547284,"guid":"79b69d6f-5775-42f4-941b-b8aabe1bc8aa","subtype":"command","commandType":"auto","position":40.0,"command":"//50 sec to run\npagecountsParsedDS.persist(MEMORY_AND_DISK).count\n\n// 485.5 MB fits in memory","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"453f0939-1d45-42fc-847a-ea35d858aa4b"},{"version":"CommandV1","origId":503877321547285,"guid":"105dc075-ef5f-41e8-ad8f-44a058cdba35","subtype":"command","commandType":"auto","position":41.0,"command":"%md Notice that the Parsed RDD is more costly in storage (compared to the first RDD) but  the Parsed Dataset is cheaper to store in memory (compared to the first Dataset).\n\nThis is because of the way Java objects are represented normally in memory. When using RDDs, Java objects are many times larger than their underlying fields, with a bunch of data structures and pointers floating around. \n\nConsider the fact that a 4 byte string with UTF-8 encoding in Java actually ends up taking 48 bytes of memory in the JVM.\n\nHowever, Project Tungsten's UnsafeRow format is far more efficient and operates directly on binary data rather than Java objects by using `sun.misc.Unsafe`. Learn more about Project Tungsten via <a href=\"https://www.youtube.com/watch?v=5ajs8EIPWGI\" target=\"_blank\">Josh Rosen's YouTube video</a> and the Reynold and Josh's <a href=\"https://databricks.com/blog/2015/04/28/project-tungsten-bringing-spark-closer-to-bare-metal.html\" target=\"_blank\">Databricks blog post</a>.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d3a0c7be-c3ce-4fca-8bdc-ec7d151fe26d"},{"version":"CommandV1","origId":503877321547286,"guid":"958b94c3-d0cf-4abb-9c4a-c94c000c60e4","subtype":"command","commandType":"auto","position":42.0,"command":"%md \n### Question #1: \n** How many unique articles in English Wikipedia were requested in the past hour?**","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4df4bb16-e997-4728-8c29-7a125a43c02b"},{"version":"CommandV1","origId":503877321547287,"guid":"fc2309a7-61f7-4dea-b434-07db70a90fff","subtype":"command","commandType":"auto","position":43.0,"command":"%md ##### RDD answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"32134fd2-b94c-44a1-9e19-444751dbb38d"},{"version":"CommandV1","origId":503877321547288,"guid":"8169db7b-bce8-4e06-bc78-23c1f4ac7962","subtype":"command","commandType":"auto","position":44.0,"command":"%md Let's filter out just the lines referring to English Wikipedia:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"da102128-ba15-4f9e-b7ce-6ac0810d5773"},{"version":"CommandV1","origId":503877321547289,"guid":"86c827ee-2029-4b2a-9180-3612d323b937","subtype":"command","commandType":"auto","position":45.0,"command":"// Note: _._1 is just scala syntax for yanking out the first element from each line\nval enPagecountsRDD = pagecountsParsedRDD.filter(_._1 == \"en\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"bcb824ae-62d2-4861-bb14-97eaff0b4605"},{"version":"CommandV1","origId":503877321547290,"guid":"ee1ec491-448a-4fd1-b6e4-67cbab165f6e","subtype":"command","commandType":"auto","position":46.0,"command":"%md Note that the above line is lazy and doesn't actually run the filter. We have to trigger the filter transformation to run by calling an action:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c331c277-cdfd-4bdb-8f13-6f41b0c55e85"},{"version":"CommandV1","origId":503877321547291,"guid":"e53eb9c4-9009-47c9-bc07-9466423d7953","subtype":"command","commandType":"auto","position":47.0,"command":"enPagecountsRDD.count()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"432ad943-c18c-43b4-b238-923d97f6164c"},{"version":"CommandV1","origId":503877321547292,"guid":"acc65640-b87d-4364-9223-bf32aa2cb1da","subtype":"command","commandType":"auto","position":48.0,"command":"%md Around 2 million lines refer to the English Wikipedia project. So about half of the 5 million articles in English Wikipedia get requested per hour. Let's take a look at 10 random lines:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f943b70d-c7d7-4931-ac0e-3dbb094003d4"},{"version":"CommandV1","origId":503877321547293,"guid":"712cb8a6-7148-411f-a625-b3acd0a74046","subtype":"command","commandType":"auto","position":49.0,"command":"// 83 seconds to run\nenPagecountsRDD.takeSample(true, 10).foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b7eae679-3a30-4550-bfcd-f9b0e91fb998"},{"version":"CommandV1","origId":503877321547294,"guid":"20e012a4-61cd-43c3-b59b-a6e19883ee48","subtype":"command","commandType":"auto","position":50.0,"command":"%md ##### Dataset answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0de55d8e-5ab9-40b8-bf80-5e56e01e1ad9"},{"version":"CommandV1","origId":503877321547295,"guid":"79fceb8c-1939-44bb-979e-ae7e2e73a0e1","subtype":"command","commandType":"auto","position":51.0,"command":"%md Running a filter and count on a Dataset looks very similar:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1de486d5-38ab-4e05-bc97-e9b32509b666"},{"version":"CommandV1","origId":503877321547296,"guid":"1f3fc5af-b1e0-4e23-abbb-8b43579c1eb4","subtype":"command","commandType":"auto","position":52.0,"command":"val enPagecountsDS = pagecountsParsedDS.filter(_._1 == \"en\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d1b28e5e-f265-40ca-ac5d-bed3974ab31e"},{"version":"CommandV1","origId":503877321547297,"guid":"312f4c6d-965a-496c-862b-460b005deeb8","subtype":"command","commandType":"auto","position":53.0,"command":"enPagecountsDS.count()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a20eec8a-6695-4516-b3e5-d80b424135ee"},{"version":"CommandV1","origId":503877321547298,"guid":"9bc821d0-0d27-4a7c-bb1a-3e39df17746c","subtype":"command","commandType":"auto","position":54.0,"command":"%md \n### Question #2:\n** How many requests total did English Wikipedia get in the past hour?**","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d14d9d44-fb45-4591-bc89-561c77bf24a3"},{"version":"CommandV1","origId":503877321547299,"guid":"d4c1bfcd-78c8-4074-9036-60577de4b6ee","subtype":"command","commandType":"auto","position":55.0,"command":"%md ##### RDD answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"2cd1c0bc-02a5-4511-9ecf-ffd4b81fafda"},{"version":"CommandV1","origId":503877321547300,"guid":"fcb2043f-0692-4b49-879c-6c042a22bc63","subtype":"command","commandType":"auto","position":56.0,"command":"%md Start with the `enPagecountsRDD`:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"208f22c3-721f-4991-93ba-7ab32481264b"},{"version":"CommandV1","origId":503877321547301,"guid":"d81d5f3f-214b-4c8b-ba06-fba65e79235c","subtype":"command","commandType":"auto","position":57.0,"command":"//45 secs to run\nenPagecountsRDD.take(5)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e07abb8e-dae9-4836-b606-541fc8fbc3f6"},{"version":"CommandV1","origId":503877321547302,"guid":"cbf1e674-e36a-4c14-a457-64ba0c4e5fab","subtype":"command","commandType":"auto","position":58.0,"command":"%md ** Challenge 2:** Can you figure out how to yank out just the requests column and then sum all of the requests?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"26910047-15bd-444f-9be5-3f82420f2256"},{"version":"CommandV1","origId":503877321547303,"guid":"37ddffd7-e19b-4bc3-aee7-c8b90bbe8e77","subtype":"command","commandType":"auto","position":59.0,"command":"// Type your answer here... Yank out just the requests column","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"96f5277a-e64b-4a9a-b01b-d8d7a5c984a5"},{"version":"CommandV1","origId":503877321547304,"guid":"73207691-fa12-48e3-aad9-a35d7b30f527","subtype":"command","commandType":"auto","position":60.0,"command":"// Type your answer here... Then build upon that by summing up all of the requests","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"04a55ce8-0542-4504-b163-1590e56fe326"},{"version":"CommandV1","origId":503877321547305,"guid":"99d8499a-d7bd-4bf7-a294-4936c0153200","subtype":"command","commandType":"auto","position":61.0,"command":"%md We can see that there were between 5 - 10 million requests to English Wikipedia in the past hour.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"84249b48-8618-4050-8edc-99f9b8eea4d6"},{"version":"CommandV1","origId":503877321547306,"guid":"435b2baa-44d9-43c2-adfd-ccd2536068ce","subtype":"command","commandType":"auto","position":62.0,"command":"%md ##### Dataset answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"94f9cada-a897-4758-b12b-6b20357855cd"},{"version":"CommandV1","origId":503877321547307,"guid":"32609ea3-4864-4324-8916-e3ee01f83ffa","subtype":"command","commandType":"auto","position":63.0,"command":"%md Let's re-write the same query using Datasets:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d656cdf3-7359-4759-9160-1c53d6c56f36"},{"version":"CommandV1","origId":503877321547308,"guid":"d5a29860-6ee1-454f-8c4a-610b1a7c077a","subtype":"command","commandType":"auto","position":64.0,"command":"// The map() operation looks the same as the RDD version\nenPagecountsDS.map(x => x._3).take(5)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c7ce5af6-dace-4d4b-987a-c6b983fbaedb"},{"version":"CommandV1","origId":503877321547309,"guid":"2b292a4f-c67e-4c81-b13e-601abf5621c0","subtype":"command","commandType":"auto","position":65.0,"command":"%md Note that there is no available `.sum()` method on Datasets:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a089e5dd-548b-4cfb-8da0-8733727f83e0"},{"version":"CommandV1","origId":503877321547310,"guid":"05a1ad16-7e26-410e-bd25-da7448f43eda","subtype":"command","commandType":"auto","position":66.0,"command":"// This will return an error in 90 sec\n//enPagecountsDS.map(x => x._3).sum","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"15f10ba5-1f45-46aa-90a2-af5d5d2007f7"},{"version":"CommandV1","origId":503877321547311,"guid":"bae83c15-d63f-45a7-bef3-762c91c4fa37","subtype":"command","commandType":"auto","position":67.0,"command":"%md The Datasets API in Spark 1.6 is still experimental, so full functionality is not available yet.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"83cbbc40-28d9-4d78-8049-56a397eb0b70"},{"version":"CommandV1","origId":503877321547312,"guid":"378371d4-178c-45db-b634-0f99e284eab7","subtype":"command","commandType":"auto","position":68.0,"command":"%md #### Strategy #1) Collect on Driver and sum locally","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"41abdabf-a8b5-4d28-a2f3-1bfb55f817a0"},{"version":"CommandV1","origId":503877321547313,"guid":"cdec8dc9-3797-4bc8-ae04-a86f21c5e512","subtype":"command","commandType":"auto","position":69.0,"command":"%md Instead, if the data is small enough, we can collect it on the Driver and sum it locally.\n\n** Challenge 3:** Implement this new strategy of collecting the data on the Driver for the summation.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6da97969-6055-480f-903a-5b86d075e359"},{"version":"CommandV1","origId":503877321547314,"guid":"57d74fb6-90a2-405d-b1b1-2807b3766285","subtype":"command","commandType":"auto","position":70.0,"command":"// Type your answer here...","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"89986109-bd08-4090-bba3-d8c421d24c9f"},{"version":"CommandV1","origId":503877321547315,"guid":"ff04e401-34ac-4027-9c24-f383c74f863b","subtype":"command","commandType":"auto","position":71.0,"command":"%md Performance here may appear fast in a local mode cluster because no network transfer has to take place. Also, collecting data at the driver to perform a sum won't scale if the data set is too large to fit on one machine (which could cause an Out of Memory condition).","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"45573c4c-c34d-4c3b-bbc4-56051aa68cb1"},{"version":"CommandV1","origId":503877321547316,"guid":"a63eafda-81c4-419f-968a-6872700807f2","subtype":"command","commandType":"auto","position":72.0,"command":"%md #### Strategy #2) Convert DS to a DF for the sum","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6e64155b-5a13-4326-a59a-8dfec6be12c4"},{"version":"CommandV1","origId":503877321547317,"guid":"90f0c58d-4543-44a4-b4ed-24af80d8684b","subtype":"command","commandType":"auto","position":73.0,"command":"%md Another strategy is to convert the Dataset to a Dataframe just to perform the sum.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"d1c1791a-aa20-400b-9230-17d27f5561a4"},{"version":"CommandV1","origId":503877321547318,"guid":"80db1bcf-dc32-4268-a39f-ba65d491da6e","subtype":"command","commandType":"auto","position":74.0,"command":"%md ** Challenge 4:** See if you can start with the `enPagecountsDS` Dataset, run a map on it like above, then convert it to a Dataframe and sum the `value` column.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b972125b-dca9-40cd-95ae-e054e47d0fef"},{"version":"CommandV1","origId":503877321547319,"guid":"51a00d90-546c-4134-b030-2e04158ce81b","subtype":"command","commandType":"auto","position":75.0,"command":"// Type your answer here...\n// Hint: Remember to import org.apache.spark.sql.functions._","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"49eda1ce-4445-4e98-800b-08f71507607d"},{"version":"CommandV1","origId":503877321547320,"guid":"fada9dca-27f2-48da-86b9-019baab54ac7","subtype":"command","commandType":"auto","position":76.0,"command":"%md #### Strategy #3) Implement a custom Aggregator for sum","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"dead0353-6acb-4810-b1c7-7d4499ff454a"},{"version":"CommandV1","origId":503877321547321,"guid":"5177e5f5-7b74-4bf5-909f-498393e309e8","subtype":"command","commandType":"auto","position":77.0,"command":"%md In the final strategy, we construct a simple Aggregator that sums up a collection of `Int`s.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"29efbd46-97d5-45e3-a6aa-5a4dea35fbe8"},{"version":"CommandV1","origId":503877321547322,"guid":"ac108e67-dc1e-44ad-b439-40a999c1b7d2","subtype":"command","commandType":"auto","position":78.0,"command":"%md Aggregators provide a mechanism for adding up all of the elements in a Dataset, returning a single result. An Aggregator is similar to a User Defined Aggregate Function (UDAF), but the interface is expressed in terms of JVM objects instead of as a Row.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"622ba75b-7a9b-4208-9983-98bc36e93739"},{"version":"CommandV1","origId":503877321547323,"guid":"8d56c364-682e-4e8e-9581-1d7abef09058","subtype":"command","commandType":"auto","position":79.0,"command":"import org.apache.spark.sql.functions._\nimport org.apache.spark.sql.Encoder\nimport org.apache.spark.sql.expressions.Aggregator\nimport org.apache.spark.sql.TypedColumn","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"26e63f23-e437-43e4-a6fd-db17a9048139"},{"version":"CommandV1","origId":503877321547324,"guid":"8c0a88fb-a8d6-4157-85fe-f244412056a7","subtype":"command","commandType":"auto","position":80.0,"command":"val simpleSum = new Aggregator[Int, Int, Int] with Serializable {\n  def zero: Int = 0                     // The initial value.\n  def reduce(b: Int, a: Int) = b + a    // Add an element to the running total\n  def merge(b1: Int, b2: Int) = b1 + b2 // Merge intermediate values.\n  def finish(b: Int) = b                // Return the final result.\n}.toColumn","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"53256fa8-0362-47b2-a05d-a6781f62eea2"},{"version":"CommandV1","origId":503877321547325,"guid":"9e19eeea-1322-4f02-814b-08fbaaf1e824","subtype":"command","commandType":"auto","position":81.0,"command":"// Why is this so slow? This cell takes about 70 seconds to complete! We will optimize this next.\nenPagecountsDS.map(x => x._3).select(simpleSum).collect","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"209dd80f-22e3-43d6-93e2-3120c4480a83"},{"version":"CommandV1","origId":503877321547326,"guid":"869d9bc2-1149-45bb-a5ae-361de48ffd06","subtype":"command","commandType":"auto","position":82.0,"command":"%md \n##### Performance Optimization: Understanding the relationship between # of partitions and # of tasks","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"58648aff-7b52-4997-8beb-30ecddc28283"},{"version":"CommandV1","origId":503877321547327,"guid":"9ee76af4-8408-4b38-889b-232835c340e4","subtype":"command","commandType":"auto","position":83.0,"command":"%md The slow Spark job above launches two stages and one task in each stage. Recall that each local mode cluster in Databricks has 4 slots, so 4 tasks can be run simultaneously.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6dd795e3-afb2-46b1-9b77-9c6eed38047a"},{"version":"CommandV1","origId":503877321547328,"guid":"1e6f3389-b129-4fb6-9950-8dd6f9ad3a33","subtype":"command","commandType":"auto","position":84.0,"command":"%md Let's repartition the Dataset from 1 partition to 4 partitions so that we can run 4 tasks in parallel when analyzing it:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"edc8d2c0-5fb9-4b57-a875-5c093c7ee432"},{"version":"CommandV1","origId":503877321547329,"guid":"4baf9be8-578f-486f-b7b4-fd976c1d650f","subtype":"command","commandType":"auto","position":85.0,"command":"val pagecounts3PartitionsDS = pagecountsParsedDS.repartition(3).cache","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"00fb6374-0faa-4ff5-8151-d6708cb02388"},{"version":"CommandV1","origId":503877321547330,"guid":"d5b9398e-19f6-47bc-8ba9-c429221574c0","subtype":"command","commandType":"auto","position":86.0,"command":"pagecounts3PartitionsDS.count // Materialize the cache","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"4d289a3b-27be-4af8-ad28-9dbfe0f2ef03"},{"version":"CommandV1","origId":503877321547331,"guid":"126adec7-41c7-493d-8446-94af70592525","subtype":"command","commandType":"auto","position":87.0,"command":"// The same operations now complete in about 25 seconds, when reading from 3 partitions in memory\npagecounts3PartitionsDS.filter(_._1 == \"en\" ).map(x => x._3).select(simpleSum).collect","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f93135ee-54ae-44cc-a166-d1e04fee8d82"},{"version":"CommandV1","origId":503877321547332,"guid":"dc4420e0-728e-442c-a7d7-bc5c200c4615","subtype":"command","commandType":"auto","position":88.0,"command":"%md \n### Question #3:\n** How many requests total did each Wikipedia project get total during this hour?**","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"46242f40-7744-4fea-913f-f268624b7c69"},{"version":"CommandV1","origId":503877321547333,"guid":"832ebbd3-9cd9-44b0-afe5-a787a93fb265","subtype":"command","commandType":"auto","position":89.0,"command":"%md Recall that our data file contains requests to all of the Wikimedia projects, including Wikibooks, Wiktionary, Wikinews, Wikiquote... and all of the 200+ languages.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"7a0aaf4f-1dd4-4d30-b2fc-7c8dc08a3a8c"},{"version":"CommandV1","origId":503877321547334,"guid":"414a2fc4-f7c0-4e90-9307-9927eb733e8c","subtype":"command","commandType":"auto","position":90.0,"command":"%md ##### Dataset answer:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0c0b6e8c-961f-49a6-ae87-2efb2657d928"},{"version":"CommandV1","origId":503877321547335,"guid":"296a40e2-3385-4408-98bb-aa81fd00d321","subtype":"command","commandType":"auto","position":91.0,"command":"%md Start by creating key/value pairs from the project prefix and the number of requests:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"dee99ce3-5d8c-4319-9001-05c5c0ee45ab"},{"version":"CommandV1","origId":503877321547336,"guid":"4487dbe3-0009-4ce9-8a98-1a5331f4a3cd","subtype":"command","commandType":"auto","position":92.0,"command":"pagecounts3PartitionsDS.map(line => (line._1, line._3)).take(5)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"a723ea6b-809a-42ab-b7c5-7e0df479e178"},{"version":"CommandV1","origId":503877321547337,"guid":"9a8c3291-0c28-4643-84d0-999c94a2b043","subtype":"command","commandType":"auto","position":93.0,"command":"pagecounts3PartitionsDS.map(line => (line._1, line._3)).groupBy(_._1).count().take(5)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"c6580d59-f0bb-4eda-ad80-6ef0068a67aa"},{"version":"CommandV1","origId":503877321547338,"guid":"7f807500-7f3b-4edc-83ac-50818fa3a050","subtype":"command","commandType":"auto","position":94.0,"command":"%md Since Datasets are still an experimental API and aggregations/sorting are not yet fully supported, let's switch the Dataset to a Dataframe for an aggregation:","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"b2d48255-8a90-4d8e-b29f-49bdb05fde52"},{"version":"CommandV1","origId":503877321547339,"guid":"bdfb3fb2-9cb1-4164-a9a6-497052c8a639","subtype":"command","commandType":"auto","position":95.0,"command":"pagecounts3PartitionsDS\n  .map(line => (line._1, line._3))     // yank out k/v pairs of the project and # of requests\n  .toDF()                              // Convert to DataFrame to perform aggregation / sorting\n  .groupBy($\"_1\")                      // Group the k/v pairs by the key (project name)\n  .agg(sum(\"_2\") as \"sumOccurances\")   // Sum up how many occurrances there are of each project\n  .orderBy($\"sumOccurances\" desc)      // Order in descening order\n  .take(10)\n  .foreach(println)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0.0,"submitTime":0.0,"finishTime":0.0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"cc515731-5872-4c74-af72-5e39cca30dd7"}],"dashboards":[],"guid":"5ce04d70-dbf1-471e-a188-a645ba7c9d49","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}